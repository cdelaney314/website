/* @pjs preload="campusmap.png"; */

PImage img;
int SIZE = 5;
ArrayList<Vertex> vertices = new ArrayList<Vertex>();
Vertex v1 = null;
Vertex v2 = null;
int uid = 1;

void setup()
{
  size(1000,600);
  int[][] lines = {
    { 1, 225, 356, 3, 5, 2, 283 },
    { 2, 171, 354, 32, 1, 4, 3, 333 },
    { 3, 225, 321, 5, 332, 1, 4, 2, 34, 35 },
    { 4, 184, 323, 2, 33, 3, 34, 35, 290, 288 },
    { 5, 254, 350, 6, 3, 1, 7 },
    { 6, 276, 317, 8, 7, 5, 332 },
    { 7, 278, 351, 8, 12, 6, 91, 5 },
    { 8, 325, 331, 9, 7, 6, 10, 11, 12 },
    { 9, 330, 317, 331, 23, 8, 10 },
    { 10, 361, 314, 8, 18, 17, 13, 14, 11, 9 },
    { 11, 363, 345, 8, 12, 13, 10, 14, 86, 97 },
    { 12, 326, 349, 7, 8, 11, 95 },
    { 13, 395, 314, 18, 17, 10, 11, 16, 14, 15, 85 },
    { 14, 397, 345, 10, 11, 86, 97, 15, 16, 13, 342 },
    { 15, 442, 312, 14, 16, 13, 36 },
    { 16, 445, 345, 15, 14, 13, 37, 342 },
    { 17, 394, 293, 10, 13, 85, 336, 43, 84 },
    { 18, 359, 295, 23, 10, 13, 22, 336 },
    { 19, 381, 245, 20, 336, 21, 20, 43 },
    { 20, 370, 244, 19, 336, 21, 19, 22 },
    { 21, 375, 221, 19, 20, 45, 22, 328, 46, 48, 44, 43 },
    { 22, 349, 245, 26, 45, 18, 336, 21, 20, 337 },
    { 23, 332, 278, 9, 24, 18 },
    { 24, 327, 263, 23, 26 },
    { 25, 317, 247, 27, 284, 28, 26, 67 },
    { 26, 333, 249, 25, 22, 24, 337 },
    { 27, 274, 279, 30, 286, 31, 25 },
    { 28, 272, 250, 67, 30, 66, 31, 286, 29, 25 },
    { 29, 309, 280, 28, 284, 331 },
    { 30, 249, 250, 28, 67, 66, 285, 27 },
    { 31, 249, 282, 28, 285, 27, 332 },
    { 32, 157, 354, 88, 33, 2, 151 },
    { 33, 155, 340, 32, 290, 4 },
    { 34, 193, 299, 3, 35, 4 },
    { 35, 215, 296, 3, 34, 4, 335 },
    { 36, 462, 310, 83, 15, 40, 37 },
    { 37, 485, 340, 36, 16, 38, 117, 118, 39 },
    { 38, 506, 307, 37, 40, 39, 199 },
    { 39, 507, 339, 40, 38, 118, 37, 117 },
    { 40, 485, 310, 36, 39, 38, 199 },
    { 41, 438, 242, 42, 83, 52 },
    { 42, 419, 242, 43, 338, 41 },
    { 43, 402, 242, 336, 21, 19, 42, 17, 44, 338, 84 },
    { 44, 399, 220, 21, 43, 48, 338 },
    { 45, 352, 222, 22, 46, 21, 337 },
    { 46, 352, 201, 327, 328, 196, 45, 330, 21, 337 },
    { 47, 371, 176, 195, 327, 328, 48, 194, 329 },
    { 48, 394, 196, 328, 47, 329, 21, 44, 49, 338 },
    { 49, 413, 199, 48, 338, 50, 192 },
    { 50, 451, 197, 51, 52, 49, 192 },
    { 51, 467, 185, 54, 52, 53, 50, 55, 56 },
    { 52, 468, 205, 53, 54, 51, 50, 41 },
    { 53, 501, 186, 70, 69, 54, 52, 51, 55, 56 },
    { 54, 502, 202, 69, 70, 53, 51, 52 },
    { 55, 495, 144, 51, 53, 56, 57 },
    { 56, 465, 144, 53, 51, 55, 57, 58, 192 },
    { 57, 491, 97, 61, 60, 59, 58, 56, 55, 255 },
    { 58, 462, 112, 57, 56, 59 },
    { 59, 464, 95, 60, 61, 57, 58, 189 },
    { 60, 492, 65, 62, 61, 59, 57 },
    { 61, 462, 63, 63, 62, 60, 57, 59 },
    { 62, 493, 43, 63, 61, 60, 256 },
    { 63, 462, 40, 322, 61, 323, 62 },
    { 64, 259, 128, 162, 163, 65, 198 },
    { 65, 337, 136, 326, 64, 198, 195 },
    { 66, 250, 222, 287, 161, 162, 67, 28, 30 },
    { 67, 268, 220, 66, 28, 30, 330, 25 },
    { 68, 393, 76, 322, 184, 187 },
    { 69, 530, 182, 70, 72, 71, 53, 54, 82, 258, 258 },
    { 70, 531, 199, 71, 69, 72, 53, 54 },
    { 71, 570, 182, 72, 70, 69, 82 },
    { 72, 571, 199, 74, 71, 69, 70 },
    { 73, 533, 248, 199, 200, 74, 75 },
    { 74, 559, 219, 73, 75, 72, 116 },
    { 75, 572, 217, 73, 74, 345 },
    { 76, 632, 215, 346, 77, 207, 77 },
    { 77, 644, 214, 76, 347, 76, 207, 210 },
    { 78, 641, 162, 347, 350 },
    { 79, 600, 121, 348, 82, 80, 81, 252 },
    { 80, 570, 124, 82, 257, 79 },
    { 81, 631, 120, 79, 348, 241, 351 },
    { 82, 573, 155, 79, 80, 71, 69 },
    { 83, 461, 269, 84, 41, 36 },
    { 84, 418, 263, 17, 85, 43, 83 },
    { 85, 419, 289, 13, 17, 84 },
    { 86, 364, 380, 14, 11, 97, 96 },
    { 87, 164, 404, 89, 88, 90, 148 },
    { 88, 151, 392, 151, 32, 89, 87 },
    { 89, 173, 388, 88, 87, 333 },
    { 90, 209, 402, 87, 283, 333, 106, 282 },
    { 91, 279, 399, 93, 282, 7, 94 },
    { 92, 233, 426, 334, 104, 106, 105, 282, 103 },
    { 93, 280, 416, 103, 91, 94, 104 },
    { 94, 314, 397, 91, 93, 102, 95 },
    { 95, 330, 396, 96, 12, 94 },
    { 96, 366, 395, 86, 95, 101 },
    { 97, 396, 377, 11, 86, 14, 98 },
    { 98, 398, 394, 99, 122, 97 },
    { 99, 399, 408, 128, 126, 122, 98 },
    { 100, 369, 410, 101, 128 },
    { 101, 339, 413, 102, 96, 100 },
    { 102, 313, 417, 103, 94, 135, 101 },
    { 103, 292, 427, 92, 93, 102, 141 },
    { 104, 252, 451, 143, 334, 92, 93, 141 },
    { 105, 216, 442, 106, 109, 92, 107 },
    { 106, 212, 426, 90, 107, 105, 92 },
    { 107, 195, 432, 108, 148, 106, 105 },
    { 108, 179, 451, 111, 148, 107 },
    { 109, 212, 460, 105, 111, 110 },
    { 110, 224, 490, 111, 145, 109 },
    { 111, 194, 485, 146, 108, 109, 110 },
    { 112, 596, 245, 115, 113, 345, 116, 355 },
    { 113, 613, 246, 112, 346, 207 },
    { 114, 614, 269, 206, 207, 206, 115, 208 },
    { 115, 598, 269, 206, 205, 114, 112, 116, 355 },
    { 116, 581, 247, 74, 112, 115, 355 },
    { 117, 490, 384, 37, 118, 39, 119, 120 },
    { 118, 508, 383, 37, 39, 117, 299, 119 },
    { 119, 489, 400, 117, 120, 118, 261 },
    { 120, 510, 401, 119, 117, 298 },
    { 121, 448, 407, 122, 123, 261, 262, 340, 341 },
    { 122, 430, 410, 124, 99, 121, 98, 341 },
    { 123, 450, 435, 125, 124, 121, 261 },
    { 124, 435, 435, 123, 122 },
    { 125, 450, 450, 267, 263, 262, 123 },
    { 126, 401, 452, 130, 127, 99 },
    { 127, 378, 454, 129, 126, 128 },
    { 128, 381, 412, 99, 127, 100 },
    { 129, 380, 476, 133, 127, 130, 131 },
    { 130, 397, 475, 129, 126, 132 },
    { 131, 381, 492, 129, 277, 132 },
    { 132, 399, 492, 130, 131, 276 },
    { 133, 343, 481, 135, 129 },
    { 134, 346, 526, 281, 280, 277 },
    { 135, 329, 494, 137, 133, 102 },
    { 136, 332, 511 },
    { 137, 304, 492, 140, 135 },
    { 138, 292, 473, 142, 140 },
    { 139, 306, 472, 140 },
    { 140, 291, 485, 138, 139, 137, 144 },
    { 141, 279, 454, 104, 103, 142 },
    { 142, 278, 474, 141, 138, 143 },
    { 143, 254, 476, 144, 104, 142 },
    { 144, 255, 493, 145, 143, 140 },
    { 145, 234, 500, 110, 146, 144 },
    { 146, 196, 501, 147, 111, 145 },
    { 147, 140, 504, 148, 149, 146 },
    { 148, 166, 428, 87, 147, 108, 107 },
    { 149, 135, 555, 147, 150 },
    { 150, 118, 586, 149 },
    { 151, 112, 357, 152, 88, 32 },
    { 152, 106, 326, 153, 151, 290, 357 },
    { 153, 106, 305, 154, 290, 289, 152 },
    { 154, 112, 274, 156, 155, 159, 153, 289 },
    { 155, 175, 249, 154, 161, 288, 287 },
    { 156, 64, 248, 157, 154 },
    { 157, 30, 211, 158, 156 },
    { 158, 15, 190, 157 },
    { 159, 21, 242, 160, 154 },
    { 160, 10, 207, 159 },
    { 161, 211, 215, 155, 162, 287, 66 },
    { 162, 243, 188, 161, 163, 64, 66, 197 },
    { 163, 232, 126, 162, 164, 64, 165 },
    { 164, 171, 113, 163, 166, 169 },
    { 165, 208, 74, 163, 172 },
    { 166, 115, 132, 164, 167 },
    { 167, 64, 120, 166, 168 },
    { 168, 20, 89, 167 },
    { 169, 117, 83, 170, 171, 164 },
    { 170, 106, 58, 171, 169, 356 },
    { 171, 139, 57, 172, 170, 169, 172 },
    { 172, 164, 58, 165, 171, 171, 173, 356 },
    { 173, 149, 15, 172, 174 },
    { 174, 186, 7, 173, 175 },
    { 175, 228, 5, 174, 176 },
    { 176, 250, 46, 175, 177 },
    { 177, 282, 59, 176, 178, 181 },
    { 178, 308, 38, 177, 179 },
    { 179, 330, 28, 178, 180 },
    { 180, 370, 3, 179, 183 },
    { 181, 292, 72, 177, 182 },
    { 182, 325, 45, 181, 183 },
    { 183, 369, 19, 182, 321, 180, 184 },
    { 184, 369, 75, 183, 68, 325 },
    { 185, 360, 114, 325, 326 },
    { 186, 378, 116, 325, 187 },
    { 187, 391, 105, 188, 68, 186 },
    { 188, 421, 86, 189, 322, 187 },
    { 189, 421, 101, 188, 59, 193 },
    { 190, 402, 132, 191, 192, 193, 192 },
    { 191, 403, 155, 194, 190, 193, 192 },
    { 192, 429, 155, 190, 193, 191, 190, 49, 50, 56 },
    { 193, 426, 133, 192, 190, 191, 189 },
    { 194, 386, 161, 47, 329, 191 },
    { 195, 351, 157, 326, 65, 47, 327 },
    { 196, 324, 195, 46, 197 },
    { 197, 289, 191, 162, 196 },
    { 198, 317, 165, 64, 65 },
    { 199, 515, 285, 38, 40, 73, 200 },
    { 200, 531, 281, 73, 199, 201, 355 },
    { 201, 556, 336, 202, 200 },
    { 202, 559, 367, 299, 298, 201, 203 },
    { 203, 602, 347, 202, 204, 344 },
    { 204, 621, 347, 203, 206, 343, 343 },
    { 205, 601, 308, 115, 344 },
    { 206, 618, 305, 204, 114, 343, 114, 115 },
    { 207, 631, 244, 343, 114, 76, 77, 113 },
    { 208, 649, 265, 114, 209 },
    { 209, 685, 265, 208, 217, 211, 210 },
    { 210, 681, 212, 212, 211, 209, 77, 240 },
    { 211, 714, 212, 210, 238, 209, 240 },
    { 212, 720, 247, 213, 210 },
    { 213, 739, 263, 214, 212 },
    { 214, 749, 317, 215, 213 },
    { 215, 734, 328, 216, 353, 214 },
    { 216, 700, 330, 217, 218, 215 },
    { 217, 681, 321, 209, 216, 218 },
    { 218, 685, 348, 291, 219, 216, 217 },
    { 219, 669, 359, 291, 218, 343 },
    { 220, 727, 355, 291, 353, 223, 221 },
    { 221, 754, 356, 353, 223, 220, 291 },
    { 222, 802, 374, 226, 227, 223, 225 },
    { 223, 780, 372, 222, 224, 221, 220 },
    { 224, 783, 400, 225, 223 },
    { 225, 804, 400, 222, 224, 308 },
    { 226, 821, 346, 232, 228, 227, 222 },
    { 227, 831, 371, 229, 226, 222 },
    { 228, 854, 350, 226, 229 },
    { 229, 854, 371, 228, 227, 230 },
    { 230, 971, 373, 229, 231 },
    { 231, 971, 353, 230 },
    { 232, 802, 326, 234, 226 },
    { 233, 816, 302, 234 },
    { 234, 798, 302, 235, 233, 232 },
    { 235, 795, 257, 237, 234, 236 },
    { 236, 881, 199, 316, 235 },
    { 237, 796, 204, 309, 260, 235 },
    { 238, 729, 206, 211, 239, 260 },
    { 239, 697, 171, 349, 238, 240, 350, 259 },
    { 240, 699, 194, 210, 211, 239 },
    { 241, 674, 127, 243, 242, 349, 350, 81 },
    { 242, 694, 112, 241, 244, 349 },
    { 243, 677, 89, 248, 244, 247, 241, 351 },
    { 244, 694, 86, 247, 243, 247, 245, 242 },
    { 245, 711, 75, 244, 247, 310 },
    { 246, 692, 45, 247 },
    { 247, 691, 67, 248, 244, 243, 246, 244, 245 },
    { 248, 673, 56, 243, 247, 352 },
    { 249, 580, 52, 253, 250, 251 },
    { 250, 607, 51, 249, 251 },
    { 251, 598, 74, 250, 249, 252 },
    { 252, 599, 91, 251, 79, 351 },
    { 253, 558, 53, 256, 249 },
    { 254, 538, 78, 257, 255, 256 },
    { 255, 520, 79, 258, 254, 57, 256 },
    { 256, 531, 39, 255, 254, 62, 253 },
    { 257, 545, 132, 80, 258, 254 },
    { 258, 519, 136, 257, 69, 69, 255 },
    { 259, 756, 170, 260, 239 },
    { 260, 756, 202, 259, 238, 237 },
    { 261, 479, 408, 123, 121, 119, 339 },
    { 262, 480, 436, 125, 263, 121 },
    { 263, 481, 451, 265, 264, 125, 262 },
    { 264, 467, 481, 266, 265, 263, 267 },
    { 265, 482, 485, 269, 270, 266, 264, 263, 297 },
    { 266, 454, 488, 265, 270, 264, 267 },
    { 267, 451, 468, 266, 264, 125 },
    { 268, 456, 535, 274, 269, 270 },
    { 269, 485, 533, 273, 268, 270, 265 },
    { 270, 454, 514, 268, 269, 265, 266 },
    { 271, 455, 580, 275, 274, 273, 272 },
    { 272, 491, 580, 274, 271, 273 },
    { 273, 486, 553, 271, 272, 269 },
    { 274, 452, 554, 271, 272, 268 },
    { 275, 402, 583, 276, 278, 271 },
    { 276, 404, 537, 132, 277, 275 },
    { 277, 382, 538, 131, 280, 276, 134 },
    { 278, 384, 581, 280, 275, 279 },
    { 279, 350, 581, 281, 278 },
    { 280, 382, 559, 277, 278, 281, 134 },
    { 281, 351, 560, 280, 279, 134 },
    { 282, 226, 403, 90, 92, 91, 283 },
    { 283, 221, 380, 90, 1, 333, 282 },
    { 284, 310, 262, 29, 25 },
    { 285, 249, 266, 30, 31, 286, 335 },
    { 286, 274, 265, 28, 27, 285 },
    { 287, 207, 255, 155, 161, 66, 335 },
    { 288, 175, 275, 289, 155, 4 },
    { 289, 148, 284, 154, 153, 290, 288 },
    { 290, 143, 319, 153, 33, 152, 289, 4 },
    { 291, 696, 386, 292, 219, 220, 218, 221 },
    { 292, 692, 421, 293, 291 },
    { 293, 690, 474, 294, 292 },
    { 294, 691, 517, 295, 293, 354 },
    { 295, 613, 544, 296, 294 },
    { 296, 561, 533, 300, 297, 295, 301 },
    { 297, 535, 492, 298, 265, 300, 296 },
    { 298, 528, 405, 120, 299, 297, 202 },
    { 299, 533, 380, 118, 298, 202 },
    { 300, 532, 528, 297, 301, 296 },
    { 301, 533, 589, 300, 296 },
    { 302, 699, 584, 354 },
    { 303, 808, 584, 305 },
    { 304, 779, 522, 305, 307, 354 },
    { 305, 806, 519, 308, 306, 303, 304 },
    { 306, 927, 529, 305 },
    { 307, 783, 460, 308, 304 },
    { 308, 809, 459, 307, 225, 305 },
    { 309, 793, 80, 316, 310, 237 },
    { 310, 754, 78, 245, 320, 309 },
    { 311, 753, 8, 320 },
    { 312, 977, 82, 316, 315, 313 },
    { 313, 982, 190, 312, 314 },
    { 314, 998, 269, 313 },
    { 315, 970, 5, 312 },
    { 316, 880, 76, 317, 312, 236, 309 },
    { 317, 899, 44, 318, 316 },
    { 318, 866, 20, 319, 317 },
    { 319, 837, 27, 320, 318 },
    { 320, 756, 29, 310, 311, 319 },
    { 321, 427, 8, 183, 322, 324 },
    { 322, 430, 61, 321, 68, 63, 188 },
    { 323, 450, 20, 63, 324 },
    { 324, 448, 5, 321, 323 },
    { 325, 371, 97, 186, 185, 184 },
    { 326, 357, 137, 195, 65, 185 },
    { 327, 348, 175, 47, 195, 46 },
    { 328, 371, 198, 47, 46, 48, 21 },
    { 329, 391, 171, 47, 48, 194 },
    { 330, 293, 205, 46, 67 },
    { 331, 308, 314, 29, 9 },
    { 332, 253, 320, 3, 6, 31 },
    { 333, 193, 382, 89, 90, 283, 2 },
    { 334, 232, 463, 92, 104 },
    { 335, 223, 270, 285, 287, 35 },
    { 336, 377, 293, 18, 17, 43, 22, 20, 19 },
    { 337, 335, 224, 46, 22, 26, 45 },
    { 338, 411, 218, 44, 43, 48, 49, 42 },
    { 339, 473, 386, 261 },
    { 340, 449, 387, 121 },
    { 341, 428, 389, 342, 122, 121 },
    { 342, 421, 345, 14, 16, 341 },
    { 343, 636, 348, 204, 204, 219, 206, 207 },
    { 344, 580, 318, 203, 205 },
    { 345, 594, 215, 112, 75, 346 },
    { 346, 611, 214, 113, 345, 76 },
    { 347, 628, 189, 77, 78 },
    { 348, 624, 147, 79, 81 },
    { 349, 695, 153, 241, 242, 239, 350 },
    { 350, 675, 159, 349, 241, 78, 239 },
    { 351, 643, 94, 81, 243, 252, 352 },
    { 352, 643, 53, 351, 248 },
    { 353, 740, 344, 215, 221, 220 },
    { 354, 694, 532, 294, 304, 302 },
    { 355, 579, 270, 116, 115, 112, 200 },
    { 356, 80, 4, 170, 172 },
    { 357, 10, 330, 152 }
  };
  
  img = loadImage("campusmap.png");
  image(img, 0, 0, 1000, 600);
  
  for(int i = 0; i < lines.length; i++)
  {
    vertices.add(new Vertex((float)lines[i][1], (float)lines[i][2], lines[i][0]));
  }
  
  for(int i = 0; i < lines.length; i++)
  {
    for(int j = 3; j < lines[i].length; j++)
    {
      vertices.get(i).addNeighbor(vertices.get(lines[i][j]-1));
    }
  }
}

void draw()
{
  image(img, 0, 0, 1000, 600);
  for(int i = 0; i < vertices.size(); i++)
  {
    vertices.get(i).show();
  }
}





void keyPressed()
{
  println("key selected: " + key);
}

void mousePressed(){
  Vertex thisSelection = getVertex(mouseX, mouseY);
  if(thisSelection != null){
    if(v1 == null){
        println("selection 1: " + thisSelection.getUID());
        v1 = thisSelection;
    }
    else{
      println("selection 2: " + thisSelection.getUID());
      v2 = getVertex(mouseX, mouseY);
      
      if(v1 == v2){
        // double clicked, remove
        println("removing vertex " + thisSelection.getUID());
        v1.remove();
        vertices.remove(vertices.indexOf(v1));
      }
      else{
        if(key == 'a'){
          // add
          v1.addNeighbor(v2);
          v2.addNeighbor(v1);
        }
        else if(key == 'r'){
          // remove
          v1.removeNeighbor(v2);
          v2.removeNeighbor(v1);
        }
        else if(key == 'm'){
          // map
          println("mapping");
          ArrayList<Vertex> path = v1.pathTo(v2);
          for(Vertex v : path){
            println(v.getUID());
          }
          for(int i = 0; i < path.size()-1; i++){
            path.get(i).highlightVertex(255,0,0);
            path.get(i).highlightEdge(path.get(i+1),255,0,0);
            path.get(i+1).highlightEdge(path.get(i),255,0,0);
          }
          path.get(path.size()-1).highlightVertex(255,0,0);
        }
        
        println("clearing selections");
        v1 = null;
        v2 = null;
      }
    }
  }
  else{
    Vertex vNew = new Vertex(mouseX, mouseY, uid++);
    vertices.add(vNew);
    vNew.show();
  }
}

Vertex getVertex(float x, float y){
  for(Vertex v : vertices){
    if(dist(x, y, v.getX(), v.getY()) < SIZE)
      return v;
  }
  return null;
}





class Vertex
{
  float x, y;
  ArrayList<Vertex> neighbors = new ArrayList<Vertex>();
  int uid;
  color white = color(255,255,255);
  color c = white;
  Vertex highlightedEdge = null;
  
  Vertex(float x, float y, int uid)
  {
      this.uid = uid;
      this.x = x;
      this.y = y;
      
  }
  
  void show()
  {
      // draw a filled in circle
      fill(c);
      ellipse(x, y, SIZE, SIZE);

      // draw all the connections
      for(int i = 0; i < neighbors.size(); i++)
      {
        Vertex v = (Vertex)neighbors.get(i);
        if(v.equals(highlightedEdge)){
          stroke(c);
        }
        else{
          stroke(white);
        }
        line(x, y, v.getX(), v.getY());
        stroke(white);
      }
  }
  
  void highlightVertex(int r, int g, int b)
  {
      // draw a filled in circle
      c = color(r,g,b);
  }
  
  void highlightEdge(Vertex v, int r, int g, int b)
  {
      // draw the connection
      c = color(r,g,b);
      highlightedEdge = v;
      line(x, y, v.getX(), v.getY());
  }
  
  boolean equals(Vertex v)
  {
      return v != null && abs(x - v.getX()) < EPSILON && abs(y - v.getY()) < EPSILON && uid == v.getUID();
  }
  
  ArrayList<Vertex> getNeighbors()
  {
      return neighbors;
  }
  
  void addNeighbor(Vertex v)
  {
      neighbors.add(v);
  }
  
  float getX()
  {
      return x;
  }
  
  float getY()
  {
      return y;
  }
  
  int getUID()
  {
    return uid;
  }
  
  void setX(float x) 
  {
      this.x = x;
  }
  
  void setY(float y)
  {
      this.y = y;
  }
  
  ArrayList<Vertex> pathTo(Vertex end)
  {
    ArrayList<Vertex> workingSet = new ArrayList<Vertex>();
    workingSet.add(this);
    ArrayList<Vertex> visitedSet = new ArrayList<Vertex>();
    HashMap<Vertex, Double> distances = new HashMap<Vertex, Double>();
    distances.put(this, (double)0);

    HashMap<Vertex, ArrayList<Vertex>> paths = new HashMap<Vertex, ArrayList<Vertex>>();
    ArrayList<Vertex> path0 = new ArrayList<Vertex>();
    path0.add(this);
    paths.put(this,  path0);

    Vertex cur = this;
    do
    {
        println("cur = " + cur.getUID());
        // update or add all unvisited neighbors of cur to working set
        for(int i = 0; i < cur.getNeighbors().size(); i++)
        {
            Vertex neighbor = cur.getNeighbors().get(i);
            print("  Total distance to neighbor " + neighbor.getUID() + "...");

            // is this in visited set?
            boolean isVisited = visitedSet.indexOf(neighbor) != -1;
            int index = workingSet.indexOf(neighbor);

            // if not, add it to the working set
            if(!isVisited)
            {
                if(index == -1) // add new to working set
                {
                    workingSet.add(neighbor);

                    double newDist = distances.get(cur) + dist(cur.getX(), cur.getY(), neighbor.getX(), neighbor.getY());
                    distances.put(neighbor, newDist);
                    println(newDist + " (added to ws)");
                    
                    ArrayList<Vertex> path = (ArrayList<Vertex>) paths.get(cur).clone();
                    path.add(neighbor);
                    paths.put(neighbor, path);
                }
                else // update something in working set
                {
                    double newDist = distances.get(cur) + dist(cur.getX(), cur.getY(), neighbor.getX(), neighbor.getY());
                    print(newDist);
                    if(newDist < distances.get(neighbor))
                    {
                        println(" (updated)");
                        distances.put(neighbor, newDist);

                        ArrayList<Vertex> path = (ArrayList<Vertex>) paths.get(cur).clone();
                        path.add(neighbor);
                        paths.put(neighbor, path);
                    }
                    else
                    {
                      println(" (not updated, still " + distances.get(neighbor) + ")");
                    }
                }
            }
            else
            {
              println("already visited");
            }
        }

        workingSet.remove(cur);
        visitedSet.add(cur);

        double minDist = distances.get(workingSet.get(0));
        Vertex minVertex = workingSet.get(0);
        for(int i = 1; i < workingSet.size(); i++)
        {
            if(distances.get(workingSet.get(i)) < minDist)
            {
                minDist = distances.get(workingSet.get(i));
                minVertex = workingSet.get(i);
            }
        }
        println("working set: " + workingSet);
        println("min is: " + minVertex.getUID());
        
        // set the next cur
        cur = minVertex;
        println("cur at x=" + cur.getX() + " end at x=" + end.getX());
        println("will repeat is: " + (abs(cur.getX() - end.getX()) > SIZE && workingSet.size() > 0));

    } while (!cur.equals(end) && workingSet.size() > 0);
    
    if(cur.equals(end))
    {
        print("path found!");
        for(Vertex v : paths.get(cur))
        {
          print(v.getUID() + "->");
        }
        println();
        return paths.get(cur);
    }
    else
    {
        ArrayList<Vertex> emptySet = new ArrayList<Vertex>();
        return emptySet;
    }
}
  
  float dist(float x1, float y1, float x2, float y2)
  {
      return sqrt( pow(x2-x1, 2) + pow(y2-y1, 2) );
  }
  
  String toString()
  {
    return "" + uid;
  }
}